{"ast":null,"code":"var _jsxFileName = \"/Users/alex/codebase/latch-take-home/src/components/mark.jsx\";\nimport { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mark({\n  title,\n  type,\n  text,\n  children,\n  bold,\n  italicized,\n  underlined,\n  variableType,\n  color,\n  clauseCounter\n}) {\n  console.log(type, text, children, clauseCounter);\n  const getChildren = () => children.map((child, index) => {\n    const isBold = child.bold || bold;\n    const isItalicized = child.italicized || italicized;\n    const isUnderlined = child.underlined || underlined;\n    const variable = child.variableType || variableType;\n    const childColor = color || child.color;\n    const isList = type === \"ul\" || type === \"ol\";\n    const childJsx = /*#__PURE__*/_jsxDEV(Mark, {\n      title: child.title,\n      type: child.type,\n      text: child.text,\n      bold: isBold,\n      italicized: isItalicized,\n      underlined: isUnderlined,\n      variableType: variable,\n      color: childColor,\n      clauseCounter: clauseCounter,\n      children: child.children\n    }, !isList && index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 22\n    }, this);\n    if (isList) return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: childJsx\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 24\n    }, this);else return childJsx;\n  });\n  const getTypeWrapper = () => {\n    switch (type) {\n      case \"block\":\n        return children => /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          sx: {\n            display: 'block'\n          },\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 30\n        }, this);\n      case \"p\":\n        // we do span here because we can't nest lists, paragraphs, etc. in a paragraph\n        return children => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 30\n        }, this);\n      case \"h1\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"h3\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 30\n        }, this);\n      case \"h2\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"h3\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 30\n        }, this);\n      case \"h3\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h4\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 30\n        }, this);\n      case \"h4\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 30\n        }, this);\n      case \"h5\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 30\n        }, this);\n      case \"h6\":\n        return children => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 30\n        }, this);\n      case \"ul\":\n        return children => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 30\n        }, this);\n      case \"ol\":\n        return children => /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 30\n        }, this);\n      case \"span\":\n        return children => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 30\n        }, this);\n      case \"clause\":\n        const current = clauseCounter.current++;\n        return children => /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          sx: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            component: \"span\",\n            mt: 0.3,\n            sx: {\n              display: 'inline-flex',\n              position: 'absolute'\n            },\n            children: [current, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 77\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Box, {\n            ml: 4,\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 178\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 30\n        }, this);\n      default:\n        return children => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 30\n        }, this);\n    }\n  };\n  const renderText = text => {\n    let output = text;\n    if (bold) output = /*#__PURE__*/_jsxDEV(\"b\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this);\n    if (italicized) output = /*#__PURE__*/_jsxDEV(\"i\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 30\n    }, this);\n    if (underlined) output = /*#__PURE__*/_jsxDEV(Box, {\n      underlined: underlined,\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 30\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        whiteSpace: \"pre-wrap\",\n        backgroundColor: color,\n        color: color && \"white\"\n      },\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  };\n  if (text !== undefined) return renderText(text);else return getTypeWrapper()(getChildren());\n}\n_c = Mark;\nexport default Mark;\nvar _c;\n$RefreshReg$(_c, \"Mark\");","map":{"version":3,"names":["Box","Typography","React","jsxDEV","_jsxDEV","Mark","title","type","text","children","bold","italicized","underlined","variableType","color","clauseCounter","console","log","getChildren","map","child","index","isBold","isItalicized","isUnderlined","variable","childColor","isList","childJsx","fileName","_jsxFileName","lineNumber","columnNumber","getTypeWrapper","component","sx","display","variant","current","mt","position","ml","renderText","output","style","whiteSpace","backgroundColor","undefined","_c","$RefreshReg$"],"sources":["/Users/alex/codebase/latch-take-home/src/components/mark.jsx"],"sourcesContent":["import { Box, Typography } from '@mui/material'\nimport React from 'react'\n\nfunction Mark({title, type, text, children, bold, italicized, underlined, variableType, color, clauseCounter}) {\n\n  console.log(type, text, children, clauseCounter)\n\n  const getChildren = () => children.map((child, index) => {\n    const isBold = child.bold || bold\n    const isItalicized = child.italicized || italicized\n    const isUnderlined = child.underlined || underlined\n    const variable = child.variableType || variableType\n    const childColor = color || child.color\n    const isList = type === \"ul\" || type === \"ol\"\n    const childJsx = <Mark\n      key={!isList && index}\n      title={child.title}\n      type={child.type}\n      text={child.text}\n      bold={isBold}\n      italicized={isItalicized}\n      underlined={isUnderlined}\n      variableType={variable}\n      color={childColor}\n      clauseCounter={clauseCounter}\n      children={child.children}\n    />\n    if (isList) return <li key={index}>{childJsx}</li>\n    else return childJsx\n  })\n\n  const getTypeWrapper = () => {\n    switch(type) {\n      case \"block\":\n        return (children) => <Box component=\"div\" sx={{ display: 'block' }}>{children}</Box>\n      case \"p\":\n        // we do span here because we can't nest lists, paragraphs, etc. in a paragraph\n        return (children) => <span>{children}</span>\n      case \"h1\":\n        return (children) => <Typography variant=\"h3\" component=\"h3\">{children}</Typography>\n      case \"h2\":\n        return (children) => <Typography variant=\"h3\" component=\"h3\">{children}</Typography>\n      case \"h3\":\n        return (children) => <Typography variant=\"h4\" component=\"h4\">{children}</Typography>\n      case \"h4\":\n        return (children) => <Typography variant=\"h6\" component=\"h6\">{children}</Typography>\n      case \"h5\":\n        return (children) => <Typography variant=\"h6\" component=\"h6\">{children}</Typography>\n      case \"h6\":\n        return (children) => <Typography variant=\"h6\" component=\"h6\">{children}</Typography>\n      case \"ul\":\n        return (children) => <ul>{children}</ul>\n      case \"ol\":\n        return (children) => <ol>{children}</ol>\n      case \"span\":\n        return (children) => <span>{children}</span>\n      case \"clause\":\n        const current = clauseCounter.current++\n        return (children) => <Box component=\"div\" sx={{ display: 'block' }}><Box component=\"span\" mt={0.3} sx={{display: 'inline-flex', position: 'absolute'}} >{current}.</Box> <Box ml={4}>{children}</Box></Box>\n      default:\n        return (children) => <span>{children}</span>\n    }\n  }\n\n  const renderText = (text) => {\n    let output = text\n    if (bold) output = <b>{output}</b>\n    if (italicized) output = <i>{output}</i>\n    if (underlined) output = <Box underlined={underlined}>{output}</Box>\n    return <span style={{whiteSpace: \"pre-wrap\", backgroundColor: color, color: color && \"white\"}}>{output}</span> \n  }\n\n  if(text !== undefined) return renderText(text)\n  else return (\n    getTypeWrapper()(getChildren())\n  )\n}\n\n\nexport default Mark"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}